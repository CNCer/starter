name: prod

volumes:
  postgres_data: 
  postgres_data_backups: 
  pgadmin: 
  media:
  rabbitmq_data:
  rabbitmq_logs:

services:
  postgres:
    build:
      context: .
      dockerfile: ./compose/postgres/Dockerfile
    image: postgres
    restart: unless-stopped
    container_name: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_data_backups:/backups
    env_file:
      - ./envvar/prod/.postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    restart: unless-stopped
    env_file:
      - ./envvar/prod/.pgadmin
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "5050:80"
    depends_on:
      postgres:
        condition: service_healthy
        restart: true

  django-web: &django
    build:
      context: .
      dockerfile: ./compose/django/Dockerfile
    container_name: django-docker
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
        restart: true
    volumes:
      - media:/app/media
    env_file:
      - ./envvar/prod/.django
      - ./envvar/prod/.postgres
      - ./envvar/prod/.rabbitmq
  frontend-proxy:
    image: nginx:latest
    restart: unless-stopped
    depends_on:
      django-web:
        condition: service_started
        restart: true
    ports:
      - "8001:80"
    volumes:
      - ./compose/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - media:/usr/share/nginx/media:ro
  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management
    restart: unless-stopped
    hostname: rabbitmq # Important for data persistence across restarts
    ports:
      - "5672:5672" # AMQP protocol port
      - "8080:15672" # Management UI port
    env_file:
      - ./envvar/prod/.rabbitmq
    environment:
      RABBITMQ_DEFAULT_VHOST: /
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq # Persistent data storage
      - rabbitmq_logs:/var/log/rabbitmq # Persistent log storage

  celeryworker:
    <<: *django
    image: celeryworker
    container_name: celeryworker
    command: celery -A config worker -l INFO
    restart: unless-stopped
    depends_on:
      django-web:
        condition: service_started
        restart: true
      rabbitmq:
        condition: service_started
        restart: true

  celerybeat:
    <<: *django
    restart: unless-stopped
    container_name: celerybeat
    image: celerybeat
    command: celery -A config beat -l INFO 
    depends_on:
      celeryworker:
        condition: service_started
        restart: true
  flower:
    <<: *django
    restart: unless-stopped
    container_name: flower
    image: flower
    command: sh -c 'exec celery -A config flower --basic_auth="$${CELERY_FLOWER_USER}:$${CELERY_FLOWER_PASSWORD}" ' 
    ports:
      - "5555:5555" 
    depends_on:
      celeryworker:
        condition: service_started
        restart: true
